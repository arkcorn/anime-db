/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const SearchLazyImport = createFileRoute('/search')()
const RegisterLazyImport = createFileRoute('/register')()
const LoginLazyImport = createFileRoute('/login')()
const ListLazyImport = createFileRoute('/list')()
const IndexLazyImport = createFileRoute('/')()
const AnimeTitleLazyImport = createFileRoute('/anime/$title')()

// Create/Update Routes

const SearchLazyRoute = SearchLazyImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/search.lazy').then((d) => d.Route))

const RegisterLazyRoute = RegisterLazyImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/register.lazy').then((d) => d.Route))

const LoginLazyRoute = LoginLazyImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login.lazy').then((d) => d.Route))

const ListLazyRoute = ListLazyImport.update({
  id: '/list',
  path: '/list',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/list.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const AnimeTitleLazyRoute = AnimeTitleLazyImport.update({
  id: '/anime/$title',
  path: '/anime/$title',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/anime.$title.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/list': {
      id: '/list'
      path: '/list'
      fullPath: '/list'
      preLoaderRoute: typeof ListLazyImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginLazyImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterLazyImport
      parentRoute: typeof rootRoute
    }
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchLazyImport
      parentRoute: typeof rootRoute
    }
    '/anime/$title': {
      id: '/anime/$title'
      path: '/anime/$title'
      fullPath: '/anime/$title'
      preLoaderRoute: typeof AnimeTitleLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/list': typeof ListLazyRoute
  '/login': typeof LoginLazyRoute
  '/register': typeof RegisterLazyRoute
  '/search': typeof SearchLazyRoute
  '/anime/$title': typeof AnimeTitleLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/list': typeof ListLazyRoute
  '/login': typeof LoginLazyRoute
  '/register': typeof RegisterLazyRoute
  '/search': typeof SearchLazyRoute
  '/anime/$title': typeof AnimeTitleLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/list': typeof ListLazyRoute
  '/login': typeof LoginLazyRoute
  '/register': typeof RegisterLazyRoute
  '/search': typeof SearchLazyRoute
  '/anime/$title': typeof AnimeTitleLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/list'
    | '/login'
    | '/register'
    | '/search'
    | '/anime/$title'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/list' | '/login' | '/register' | '/search' | '/anime/$title'
  id:
    | '__root__'
    | '/'
    | '/list'
    | '/login'
    | '/register'
    | '/search'
    | '/anime/$title'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  ListLazyRoute: typeof ListLazyRoute
  LoginLazyRoute: typeof LoginLazyRoute
  RegisterLazyRoute: typeof RegisterLazyRoute
  SearchLazyRoute: typeof SearchLazyRoute
  AnimeTitleLazyRoute: typeof AnimeTitleLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  ListLazyRoute: ListLazyRoute,
  LoginLazyRoute: LoginLazyRoute,
  RegisterLazyRoute: RegisterLazyRoute,
  SearchLazyRoute: SearchLazyRoute,
  AnimeTitleLazyRoute: AnimeTitleLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.jsx",
      "children": [
        "/",
        "/list",
        "/login",
        "/register",
        "/search",
        "/anime/$title"
      ]
    },
    "/": {
      "filePath": "index.lazy.jsx"
    },
    "/list": {
      "filePath": "list.lazy.jsx"
    },
    "/login": {
      "filePath": "login.lazy.jsx"
    },
    "/register": {
      "filePath": "register.lazy.jsx"
    },
    "/search": {
      "filePath": "search.lazy.jsx"
    },
    "/anime/$title": {
      "filePath": "anime.$title.lazy.jsx"
    }
  }
}
ROUTE_MANIFEST_END */
